#!/usr/bin/env node

if (process.env.NODE_ENV === 'production') return console.log('WTF you doing?');

var mongoose = require('mongoose')
  , Question  = require('./../models/question.js')
  , Answer    = require('./../models/answer.js');

// First three responses are next door. Fourth response is another street.
// Fifth response is another city.
var responses = [
  {value: 'yes', coordinates: [43.168515, -79.254748]},
  {value: 'yes', coordinates: [43.168435, -79.254692]},
  {value: 'no', coordinates: [43.168594, -79.254804]},
  {value: 'no', coordinates: [43.155235, -79.245704]},
  {value: 'yes', coordinates: [43.052581, -79.058984]}
];

mongoose.connect('mongodb://localhost/pollapp');

// Remove all the questions and answers.
Answer.remove({}, function(err) {
  if (err) {
    console.log('Cannot delete answers for some reason.');
    process.exit();
  }
  
  Question.remove({}, function(err) {
    if (err) {
      console.log('Cannot delete questions for some reason.');
      process.exit();
    }
    
    var question = new Question({
      value: 'Is it a trap?',
      numAnswers: 0
    });
    question.save(function(err, question) {
      if (err) {
        console.log(err);
        process.exit();
      }

      var answerQuestion = function(err, question, iteration, maxIterations) {
        if (err) {
          console.log(err);
          process.exit();
        }

        if (iteration < maxIterations) {
          var answer = new Answer({
            question_id: question.id,
            value: responses[iteration].value,
            coordinates: responses[iteration].coordinates
          });
          return answer.save(function(err, answer) {
            return answerQuestion(err, question, iteration + 1, maxIterations);
          });
        } else {
         
          
          question.numAnswers = maxIterations;
          
          question.save(function(err, question){
            console.log(question);
            console.log('Saved a great question. Got some good answers.');
            process.exit();
          });

        }
      };
      answerQuestion(null, question, 0, 5);
    });
  });

});
